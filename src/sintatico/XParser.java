//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintatico;

import java.util.*;
//import java_cup.runtime.*;
import sintaxeAbstrata.*;
import lexico.*;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({ "rawtypes", "deprecation" })
public class XParser extends java_cup.runtime.lr_parser {

	public final Class getSymbolContainer() {
		return iXSymbols.class;
	}

	/** Default constructor. */

	public XParser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public XParser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public XParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(
			new String[] { "\000\144\000\002\002\004\000\002\002\003\000\002\003"
					+ "\002\000\002\003\003\000\002\004\003\000\002\004\004"
					+ "\000\002\005\003\000\002\005\003\000\002\005\003\000"
					+ "\002\005\003\000\002\014\003\000\002\014\003\000\002"
					+ "\015\003\000\002\017\003\000\002\017\003\000\002\017"
					+ "\003\000\002\016\004\000\002\020\003\000\002\020\004"
					+ "\000\002\021\005\000\002\022\003\000\002\022\005\000"
					+ "\002\024\003\000\002\024\003\000\002\023\003\000\002"
					+ "\023\005\000\002\025\005\000\002\025\005\000\002\026"
					+ "\005\000\002\006\006\000\002\007\006\000\002\027\003"
					+ "\000\002\027\003\000\002\027\003\000\002\030\003\000"
					+ "\002\030\003\000\002\034\002\000\002\034\003\000\002"
					+ "\033\003\000\002\033\005\000\002\031\003\000\002\031"
					+ "\003\000\002\031\005\000\002\031\003\000\002\031\004"
					+ "\000\002\031\004\000\002\031\003\000\002\037\003\000"
					+ "\002\037\004\000\002\035\006\000\002\032\005\000\002"
					+ "\032\005\000\002\032\005\000\002\032\005\000\002\032"
					+ "\005\000\002\032\005\000\002\032\005\000\002\032\005"
					+ "\000\002\032\005\000\002\032\005\000\002\011\002\000"
					+ "\002\011\003\000\002\010\003\000\002\010\004\000\002"
					+ "\036\006\000\002\044\002\000\002\044\003\000\002\040"
					+ "\004\000\002\041\002\000\002\041\003\000\002\042\003"
					+ "\000\002\042\004\000\002\043\004\000\002\045\005\000"
					+ "\002\046\003\000\002\046\005\000\002\047\002\000\002"
					+ "\047\003\000\002\013\010\000\002\012\012\000\002\050"
					+ "\003\000\002\050\003\000\002\050\003\000\002\050\003"
					+ "\000\002\050\003\000\002\055\003\000\002\055\003\000"
					+ "\002\056\010\000\002\057\012\000\002\054\007\000\002"
					+ "\052\006\000\002\053\004\000\002\051\005\000\002\060"
					+ "\002\000\002\060\003\000\002\061\003\000\002\061\004"
					+ "\000\002\062\003\000\002\062\003\000\002\062\003" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(
			new String[] { "\000\242\000\014\002\uffff\004\012\005\017\011\016\012"
					+ "\011\001\002\000\004\002\244\001\002\000\014\002\ufffa"
					+ "\004\ufffa\005\ufffa\011\ufffa\012\ufffa\001\002\000\004\002"
					+ "\000\001\002\000\014\002\ufff8\004\ufff8\005\ufff8\011\ufff8"
					+ "\012\ufff8\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\011"
					+ "\ufffd\012\ufffd\001\002\000\004\022\174\001\002\000\010"
					+ "\006\024\007\025\010\022\001\002\000\014\002\ufffe\004"
					+ "\012\005\017\011\016\012\011\001\002\000\014\002\ufff9"
					+ "\004\ufff9\005\ufff9\011\ufff9\012\ufff9\001\002\000\014\002"
					+ "\ufffb\004\ufffb\005\ufffb\011\ufffb\012\ufffb\001\002\000\010"
					+ "\006\024\007\025\010\022\001\002\000\010\006\024\007"
					+ "\025\010\022\001\002\000\004\022\ufff6\001\002\000\004"
					+ "\022\121\001\002\000\006\022\ufff2\023\ufff2\001\002\000"
					+ "\004\022\ufff7\001\002\000\006\022\ufff3\023\ufff3\001\002"
					+ "\000\006\022\ufff4\023\ufff4\001\002\000\006\022\ufff5\023"
					+ "\027\001\002\000\022\017\042\020\034\021\037\022\045"
					+ "\025\033\027\051\035\044\047\046\001\002\000\006\022"
					+ "\ufff1\023\027\001\002\000\006\022\ufff0\023\ufff0\001\002"
					+ "\000\006\022\uffef\023\uffef\001\002\000\024\005\017\017"
					+ "\uffc5\020\uffc5\021\uffc5\022\uffc5\025\uffc5\027\uffc5\035\uffc5"
					+ "\047\uffc5\001\002\000\040\024\uffe1\026\uffe1\030\uffe1\031"
					+ "\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1"
					+ "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000"
					+ "\040\024\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\034\uffdf"
					+ "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\044"
					+ "\uffdf\045\uffdf\046\uffdf\001\002\000\040\024\uffde\026\uffde"
					+ "\030\uffde\031\uffde\032\uffde\034\uffde\035\uffde\036\uffde\037"
					+ "\uffde\040\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde"
					+ "\001\002\000\040\024\uffe0\026\uffe0\030\uffe0\031\uffe0\032"
					+ "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0"
					+ "\043\uffe0\044\uffe0\045\uffe0\046\uffe0\001\002\000\030\024"
					+ "\112\034\054\035\057\036\063\037\061\040\055\042\064"
					+ "\043\060\044\056\045\053\046\065\001\002\000\042\023"
					+ "\027\024\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8"
					+ "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\044"
					+ "\uffd8\045\uffd8\046\uffd8\001\002\000\040\024\uffe2\026\uffe2"
					+ "\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2\037"
					+ "\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2"
					+ "\001\002\000\040\024\uffd3\026\uffd3\030\uffd3\031\uffd3\032"
					+ "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3"
					+ "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002\000\022\017"
					+ "\042\020\034\021\037\022\045\025\033\027\051\035\044"
					+ "\047\046\001\002\000\046\023\uffd2\024\uffd2\026\uffd2\027"
					+ "\101\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2"
					+ "\036\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045"
					+ "\uffd2\046\uffd2\001\002\000\022\017\042\020\034\021\037"
					+ "\022\045\025\033\027\051\035\044\047\046\001\002\000"
					+ "\040\024\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9"
					+ "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\044"
					+ "\uffd9\045\uffd9\046\uffd9\001\002\000\040\024\uffd6\026\uffd6"
					+ "\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6\037"
					+ "\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6"
					+ "\001\002\000\022\017\042\020\034\021\037\022\045\025"
					+ "\033\027\051\035\044\047\046\001\002\000\030\030\062"
					+ "\034\054\035\057\036\063\037\061\040\055\042\064\043"
					+ "\060\044\056\045\053\046\065\001\002\000\022\017\042"
					+ "\020\034\021\037\022\045\025\033\027\051\035\044\047"
					+ "\046\001\002\000\022\017\042\020\034\021\037\022\045"
					+ "\025\033\027\051\035\044\047\046\001\002\000\022\017"
					+ "\042\020\034\021\037\022\045\025\033\027\051\035\044"
					+ "\047\046\001\002\000\022\017\042\020\034\021\037\022"
					+ "\045\025\033\027\051\035\044\047\046\001\002\000\022"
					+ "\017\042\020\034\021\037\022\045\025\033\027\051\035"
					+ "\044\047\046\001\002\000\022\017\042\020\034\021\037"
					+ "\022\045\025\033\027\051\035\044\047\046\001\002\000"
					+ "\022\017\042\020\034\021\037\022\045\025\033\027\051"
					+ "\035\044\047\046\001\002\000\040\024\uffd7\026\uffd7\030"
					+ "\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7"
					+ "\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\001"
					+ "\002\000\022\017\042\020\034\021\037\022\045\025\033"
					+ "\027\051\035\044\047\046\001\002\000\022\017\042\020"
					+ "\034\021\037\022\045\025\033\027\051\035\044\047\046"
					+ "\001\002\000\022\017\042\020\034\021\037\022\045\025"
					+ "\033\027\051\035\044\047\046\001\002\000\040\024\uffc6"
					+ "\026\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\036"
					+ "\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6"
					+ "\046\uffc6\001\002\000\032\024\uffc9\026\uffc9\030\uffc9\031"
					+ "\uffc9\032\uffc9\034\054\035\057\036\063\037\061\040\055"
					+ "\045\053\046\065\001\002\000\040\024\uffcd\026\uffcd\030"
					+ "\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd"
					+ "\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\053\046\065\001"
					+ "\002\000\040\024\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc"
					+ "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043"
					+ "\uffcc\044\uffcc\045\053\046\065\001\002\000\032\024\uffca"
					+ "\026\uffca\030\uffca\031\uffca\032\uffca\034\054\035\057\036"
					+ "\063\037\061\040\055\045\053\046\065\001\002\000\040"
					+ "\024\uffce\026\uffce\030\uffce\031\uffce\032\uffce\034\uffce\035"
					+ "\uffce\036\063\037\061\040\055\042\uffce\043\uffce\044\uffce"
					+ "\045\053\046\065\001\002\000\032\024\uffc8\026\uffc8\030"
					+ "\uffc8\031\uffc8\032\uffc8\034\054\035\057\036\063\037\061"
					+ "\040\055\045\053\046\065\001\002\000\040\024\uffcb\026"
					+ "\uffcb\030\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb"
					+ "\037\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb\045\053\046"
					+ "\065\001\002\000\040\024\uffcf\026\uffcf\030\uffcf\031\uffcf"
					+ "\032\uffcf\034\uffcf\035\uffcf\036\063\037\061\040\055\042"
					+ "\uffcf\043\uffcf\044\uffcf\045\053\046\065\001\002\000\040"
					+ "\024\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7\035"
					+ "\uffc7\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\044\uffc7"
					+ "\045\uffc7\046\uffc7\001\002\000\040\024\uffd5\026\uffd5\030"
					+ "\uffd5\031\uffd5\032\uffd5\034\054\035\057\036\063\037\061"
					+ "\040\055\042\064\043\060\044\056\045\053\046\065\001"
					+ "\002\000\024\017\042\020\034\021\037\022\045\025\033"
					+ "\027\051\030\uffdd\035\044\047\046\001\002\000\034\024"
					+ "\uffdb\030\uffdb\032\uffdb\034\054\035\057\036\063\037\061"
					+ "\040\055\042\064\043\060\044\056\045\053\046\065\001"
					+ "\002\000\004\030\107\001\002\000\006\030\uffdc\032\105"
					+ "\001\002\000\022\017\042\020\034\021\037\022\045\025"
					+ "\033\027\051\035\044\047\046\001\002\000\034\024\uffda"
					+ "\030\uffda\032\uffda\034\054\035\057\036\063\037\061\040"
					+ "\055\042\064\043\060\044\056\045\053\046\065\001\002"
					+ "\000\040\024\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\034"
					+ "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0"
					+ "\044\uffd0\045\uffd0\046\uffd0\001\002\000\040\024\uffd4\026"
					+ "\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4"
					+ "\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046"
					+ "\uffd4\001\002\000\044\023\uffd1\024\uffd1\026\uffd1\030\uffd1"
					+ "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037"
					+ "\uffd1\040\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1"
					+ "\001\002\000\046\022\uffee\023\uffee\024\uffee\026\uffee\030"
					+ "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee"
					+ "\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046"
					+ "\uffee\001\002\000\022\017\042\020\034\021\037\022\045"
					+ "\025\033\027\051\035\044\047\046\001\002\000\022\017"
					+ "\uffc4\020\uffc4\021\uffc4\022\uffc4\025\uffc4\027\uffc4\035\uffc4"
					+ "\047\uffc4\001\002\000\024\005\017\017\uffc3\020\uffc3\021"
					+ "\uffc3\022\uffc3\025\uffc3\027\uffc3\035\uffc3\047\uffc3\001\002"
					+ "\000\022\017\uffc2\020\uffc2\021\uffc2\022\uffc2\025\uffc2\027"
					+ "\uffc2\035\uffc2\047\uffc2\001\002\000\030\026\120\034\054"
					+ "\035\057\036\063\037\061\040\055\042\064\043\060\044"
					+ "\056\045\053\046\065\001\002\000\040\024\uffc1\026\uffc1"
					+ "\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\036\uffc1\037"
					+ "\uffc1\040\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1"
					+ "\001\002\000\004\033\127\001\002\000\006\031\uffe9\032"
					+ "\uffe9\001\002\000\006\031\125\032\124\001\002\000\004"
					+ "\022\121\001\002\000\042\002\uffe3\004\uffe3\005\uffe3\011"
					+ "\uffe3\012\uffe3\013\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3"
					+ "\022\uffe3\025\uffe3\026\uffe3\027\uffe3\035\uffe3\047\uffe3\001"
					+ "\002\000\006\031\uffe8\032\uffe8\001\002\000\024\017\042"
					+ "\020\034\021\037\022\045\023\131\025\033\027\051\035"
					+ "\044\047\046\001\002\000\032\031\uffe7\032\uffe7\034\054"
					+ "\035\057\036\063\037\061\040\055\042\064\043\060\044"
					+ "\056\045\053\046\065\001\002\000\022\017\042\020\034"
					+ "\021\037\022\045\025\033\027\051\035\044\047\046\001"
					+ "\002\000\006\031\uffe6\032\uffe6\001\002\000\006\024\134"
					+ "\032\105\001\002\000\006\031\uffe5\032\uffe5\001\002\000"
					+ "\004\022\136\001\002\000\004\027\137\001\002\000\014"
					+ "\004\140\006\uffc0\007\uffc0\010\uffc0\030\uffb5\001\002\000"
					+ "\010\006\uffbf\007\uffbf\010\uffbf\001\002\000\006\030\uffb7"
					+ "\032\uffb7\001\002\000\006\030\uffb4\032\161\001\002\000"
					+ "\004\030\156\001\002\000\010\006\024\007\025\010\022"
					+ "\001\002\000\004\022\155\001\002\000\006\022\uffbd\023"
					+ "\151\001\002\000\004\022\uffbe\001\002\000\004\022\uffbc"
					+ "\001\002\000\004\024\154\001\002\000\006\022\uffbb\023"
					+ "\151\001\002\000\004\022\uffba\001\002\000\006\022\uffb9"
					+ "\023\uffb9\001\002\000\006\030\uffb8\032\uffb8\001\002\000"
					+ "\022\017\042\020\034\021\037\022\045\025\033\027\051"
					+ "\035\044\047\046\001\002\000\030\031\160\034\054\035"
					+ "\057\036\063\037\061\040\055\042\064\043\060\044\056"
					+ "\045\053\046\065\001\002\000\014\002\uffb2\004\uffb2\005"
					+ "\uffb2\011\uffb2\012\uffb2\001\002\000\012\004\140\006\uffc0"
					+ "\007\uffc0\010\uffc0\001\002\000\006\030\uffb6\032\uffb6\001"
					+ "\002\000\014\002\ufffc\004\ufffc\005\ufffc\011\ufffc\012\ufffc"
					+ "\001\002\000\004\022\165\001\002\000\010\031\uffeb\032"
					+ "\uffeb\033\127\001\002\000\006\031\uffed\032\uffed\001\002"
					+ "\000\006\031\uffea\032\uffea\001\002\000\006\031\172\032"
					+ "\171\001\002\000\004\022\165\001\002\000\026\002\uffe4"
					+ "\004\uffe4\005\uffe4\011\uffe4\012\uffe4\013\uffe4\016\uffe4\022"
					+ "\uffe4\025\uffe4\026\uffe4\001\002\000\006\031\uffec\032\uffec"
					+ "\001\002\000\004\027\175\001\002\000\014\004\140\006"
					+ "\uffc0\007\uffc0\010\uffc0\030\uffb5\001\002\000\004\030\177"
					+ "\001\002\000\012\013\210\016\201\022\045\025\200\001"
					+ "\002\000\020\004\012\005\017\013\210\016\201\022\045"
					+ "\025\200\026\uffa4\001\002\000\004\027\230\001\002\000"
					+ "\030\002\uffab\004\uffab\005\uffab\011\uffab\012\uffab\013\uffab"
					+ "\015\uffab\016\uffab\022\uffab\025\uffab\026\uffab\001\002\000"
					+ "\030\002\uffac\004\uffac\005\uffac\011\uffac\012\uffac\013\uffac"
					+ "\015\uffac\016\uffac\022\uffac\025\uffac\026\uffac\001\002\000"
					+ "\030\002\uffb1\004\uffb1\005\uffb1\011\uffb1\012\uffb1\013\uffb1"
					+ "\015\uffb1\016\uffb1\022\uffb1\025\uffb1\026\uffb1\001\002\000"
					+ "\014\002\uffb3\004\uffb3\005\uffb3\011\uffb3\012\uffb3\001\002"
					+ "\000\006\023\027\033\225\001\002\000\030\002\uffb0\004"
					+ "\uffb0\005\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0"
					+ "\022\uffb0\025\uffb0\026\uffb0\001\002\000\004\027\216\001"
					+ "\002\000\030\002\uffad\004\uffad\005\uffad\011\uffad\012\uffad"
					+ "\013\uffad\015\uffad\016\uffad\022\uffad\025\uffad\026\uffad\001"
					+ "\002\000\030\002\uffaf\004\uffaf\005\uffaf\011\uffaf\012\uffaf"
					+ "\013\uffaf\015\uffaf\016\uffaf\022\uffaf\025\uffaf\026\uffaf\001"
					+ "\002\000\030\002\uffae\004\uffae\005\uffae\011\uffae\012\uffae"
					+ "\013\uffae\015\uffae\016\uffae\022\uffae\025\uffae\026\uffae\001"
					+ "\002\000\004\031\215\001\002\000\030\002\uffa6\004\uffa6"
					+ "\005\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6\022"
					+ "\uffa6\025\uffa6\026\uffa6\001\002\000\022\017\042\020\034"
					+ "\021\037\022\045\025\033\027\051\035\044\047\046\001"
					+ "\002\000\030\030\220\034\054\035\057\036\063\037\061"
					+ "\040\055\042\064\043\060\044\056\045\053\046\065\001"
					+ "\002\000\004\014\221\001\002\000\012\013\210\016\201"
					+ "\022\045\025\200\001\002\000\030\002\uffaa\004\uffaa\005"
					+ "\uffaa\011\uffaa\012\uffaa\013\uffaa\015\223\016\uffaa\022\uffaa"
					+ "\025\uffaa\026\uffaa\001\002\000\012\013\210\016\201\022"
					+ "\045\025\200\001\002\000\030\002\uffa9\004\uffa9\005\uffa9"
					+ "\011\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\022\uffa9\025"
					+ "\uffa9\026\uffa9\001\002\000\022\017\042\020\034\021\037"
					+ "\022\045\025\033\027\051\035\044\047\046\001\002\000"
					+ "\030\031\227\034\054\035\057\036\063\037\061\040\055"
					+ "\042\064\043\060\044\056\045\053\046\065\001\002\000"
					+ "\030\002\uffa7\004\uffa7\005\uffa7\011\uffa7\012\uffa7\013\uffa7"
					+ "\015\uffa7\016\uffa7\022\uffa7\025\uffa7\026\uffa7\001\002\000"
					+ "\022\017\042\020\034\021\037\022\045\025\033\027\051"
					+ "\035\044\047\046\001\002\000\030\030\232\034\054\035"
					+ "\057\036\063\037\061\040\055\042\064\043\060\044\056"
					+ "\045\053\046\065\001\002\000\012\013\210\016\201\022"
					+ "\045\025\200\001\002\000\030\002\uffa8\004\uffa8\005\uffa8"
					+ "\011\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\022\uffa8\025"
					+ "\uffa8\026\uffa8\001\002\000\020\004\012\005\017\013\210"
					+ "\016\201\022\045\025\200\026\uffa3\001\002\000\020\004"
					+ "\uff9f\005\uff9f\013\uff9f\016\uff9f\022\uff9f\025\uff9f\026\uff9f"
					+ "\001\002\000\004\026\242\001\002\000\020\004\uff9e\005"
					+ "\uff9e\013\uff9e\016\uff9e\022\uff9e\025\uff9e\026\uff9e\001\002"
					+ "\000\020\004\uffa2\005\uffa2\013\uffa2\016\uffa2\022\uffa2\025"
					+ "\uffa2\026\uffa2\001\002\000\020\004\uffa0\005\uffa0\013\uffa0"
					+ "\016\uffa0\022\uffa0\025\uffa0\026\uffa0\001\002\000\030\002"
					+ "\uffa5\004\uffa5\005\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5"
					+ "\016\uffa5\022\uffa5\025\uffa5\026\uffa5\001\002\000\020\004"
					+ "\uffa1\005\uffa1\013\uffa1\016\uffa1\022\uffa1\025\uffa1\026\uffa1"
					+ "\001\002\000\004\002\001\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(
			new String[] { "\000\242\000\022\002\003\003\005\004\012\005\007\006"
					+ "\014\007\004\012\006\013\013\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\012\014\163\015\022"
					+ "\016\017\017\025\001\001\000\014\005\162\006\014\007"
					+ "\004\012\006\013\013\001\001\000\002\001\001\000\002"
					+ "\001\001\000\012\014\134\015\022\016\017\017\025\001"
					+ "\001\000\012\014\020\015\022\016\017\017\025\001\001"
					+ "\000\002\001\001\000\006\023\122\025\121\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\006\020\027\021\030\001\001\000\020\027"
					+ "\046\030\037\031\034\032\035\035\047\036\042\037\040"
					+ "\001\001\000\004\021\031\001\001\000\002\001\001\000"
					+ "\002\001\001\000\010\007\114\010\113\011\112\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\004\021\110\001\001"
					+ "\000\002\001\001\000\002\001\001\000\020\027\046\030"
					+ "\107\031\034\032\035\035\047\036\042\037\040\001\001"
					+ "\000\002\001\001\000\020\027\046\030\077\031\034\032"
					+ "\035\035\047\036\042\037\040\001\001\000\002\001\001"
					+ "\000\002\001\001\000\020\027\046\030\051\031\034\032"
					+ "\035\035\047\036\042\037\040\001\001\000\002\001\001"
					+ "\000\020\027\046\030\076\031\034\032\035\035\047\036"
					+ "\042\037\040\001\001\000\020\027\046\030\075\031\034"
					+ "\032\035\035\047\036\042\037\040\001\001\000\020\027"
					+ "\046\030\074\031\034\032\035\035\047\036\042\037\040"
					+ "\001\001\000\020\027\046\030\073\031\034\032\035\035"
					+ "\047\036\042\037\040\001\001\000\020\027\046\030\072"
					+ "\031\034\032\035\035\047\036\042\037\040\001\001\000"
					+ "\020\027\046\030\071\031\034\032\035\035\047\036\042"
					+ "\037\040\001\001\000\020\027\046\030\070\031\034\032"
					+ "\035\035\047\036\042\037\040\001\001\000\002\001\001"
					+ "\000\020\027\046\030\067\031\034\032\035\035\047\036"
					+ "\042\037\040\001\001\000\020\027\046\030\066\031\034"
					+ "\032\035\035\047\036\042\037\040\001\001\000\020\027"
					+ "\046\030\065\031\034\032\035\035\047\036\042\037\040"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\024\027\046\030\101"
					+ "\031\034\032\035\033\103\034\102\035\047\036\042\037"
					+ "\040\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\020\027\046\030\105\031\034\032\035\035"
					+ "\047\036\042\037\040\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\020\027\046\030\116\031\034\032\035\035\047"
					+ "\036\042\037\040\001\001\000\002\001\001\000\006\007"
					+ "\114\010\115\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\004\025\125\001\001\000\002\001\001"
					+ "\000\002\001\001\000\022\026\131\027\046\030\127\031"
					+ "\034\032\035\035\047\036\042\037\040\001\001\000\002"
					+ "\001\001\000\022\027\046\030\101\031\034\032\035\033"
					+ "\132\035\047\036\042\037\040\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\012\044\143\045\140\046\141\047\142"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\006\017\145\040\144\001\001"
					+ "\000\002\001\001\000\010\041\146\042\147\043\151\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\006\042\152\043\151\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\020\027\046\030\156"
					+ "\031\034\032\035\035\047\036\042\037\040\001\001\000"
					+ "\002\001\001\000\002\001\001\000\006\044\143\045\161"
					+ "\001\001\000\002\001\001\000\002\001\001\000\010\022"
					+ "\167\024\165\025\166\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\006\024"
					+ "\172\025\166\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\012\044\143\045\140\046\141\047"
					+ "\175\001\001\000\002\001\001\000\026\035\213\037\205"
					+ "\050\204\051\203\052\212\053\210\054\211\055\206\056"
					+ "\202\057\201\001\001\000\040\006\234\007\236\035\213"
					+ "\037\205\050\240\051\203\052\212\053\210\054\211\055"
					+ "\206\056\202\057\201\060\235\061\233\062\237\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\004\021\110\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\020\027\046\030\216\031\034\032\035\035"
					+ "\047\036\042\037\040\001\001\000\002\001\001\000\002"
					+ "\001\001\000\026\035\213\037\205\050\221\051\203\052"
					+ "\212\053\210\054\211\055\206\056\202\057\201\001\001"
					+ "\000\002\001\001\000\026\035\213\037\205\050\223\051"
					+ "\203\052\212\053\210\054\211\055\206\056\202\057\201"
					+ "\001\001\000\002\001\001\000\020\027\046\030\225\031"
					+ "\034\032\035\035\047\036\042\037\040\001\001\000\002"
					+ "\001\001\000\002\001\001\000\020\027\046\030\230\031"
					+ "\034\032\035\035\047\036\042\037\040\001\001\000\002"
					+ "\001\001\000\026\035\213\037\205\050\232\051\203\052"
					+ "\212\053\210\054\211\055\206\056\202\057\201\001\001"
					+ "\000\002\001\001\000\034\006\234\007\236\035\213\037"
					+ "\205\050\240\051\203\052\212\053\210\054\211\055\206"
					+ "\056\202\057\201\062\242\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$XParser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$XParser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
			int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$XParser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/** Scan to get the next Symbol. */
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {

		return this.getScanner().next_token();

	}

	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error ");

		if (info instanceof java_cup.runtime.Symbol) {
			m.append("(" + info.toString() + ")");
		}
		m.append(" : " + message);
		System.out.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}

	/** Cup generated class to encapsulate user supplied action code. */
	@SuppressWarnings({ "rawtypes", "unchecked", "unused" })
	class CUP$XParser$actions {
		private final XParser parser;

		/** Constructor */
		CUP$XParser$actions(XParser parser) {
			this.parser = parser;
		}

		/**
		 * Method 0 with the actual generated action code for actions 0 to 300.
		 */
		public final java_cup.runtime.Symbol CUP$XParser$do_action_part00000000(int CUP$XParser$act_num,
				java_cup.runtime.lr_parser CUP$XParser$parser, java.util.Stack CUP$XParser$stack, int CUP$XParser$top)
				throws java.lang.Exception {
			/* Symbol object for return from actions */
			java_cup.runtime.Symbol CUP$XParser$result;

			/* select the action based on the action number */
			switch (CUP$XParser$act_num) {
			/* . . . . . . . . . . . . . . . . . . . . */
			case 0: // $START ::= programa EOF
			{
				Object RESULT = null;
				int start_valleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int start_valright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Programa start_val = (Programa) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;
				RESULT = start_val;
				CUP$XParser$result = parser.getSymbolFactory().newSymbol("$START", 0,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				/* ACCEPT */
				CUP$XParser$parser.done_parsing();
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 1: // programa ::= dec_list_opt
			{
				Programa RESULT = null;
				int dlleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dlright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<Dec> dl = (List<Dec>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Programa(dl);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("programa", 0,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 2: // dec_list_opt ::=
			{
				List<Dec> RESULT = null;

				RESULT = new ArrayList<Dec>();

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_list_opt", 1,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 3: // dec_list_opt ::= dec_list
			{
				List<Dec> RESULT = null;
				int dlleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dlright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<Dec> dl = (List<Dec>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = dl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_list_opt", 1,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 4: // dec_list ::= dec
			{
				List<Dec> RESULT = null;
				int dleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<Dec> d = (List<Dec>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Dec>(d);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_list", 2,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 5: // dec_list ::= dec_list dec
			{
				List<Dec> RESULT = null;
				int dlleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int dlright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				List<Dec> dl = (List<Dec>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;
				int dleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<Dec> d = (List<Dec>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				dl.addAll(d);
				RESULT = dl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_list", 2,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 6: // dec ::= dec_var
			{
				List<Dec> RESULT = null;
				int dleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<DecVar> d = (List<DecVar>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Dec>(d);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec", 3,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 7: // dec ::= dec_cons
			{
				List<Dec> RESULT = null;
				int dleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<DecCons> d = (List<DecCons>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Dec>(d);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec", 3,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 8: // dec ::= dec_proc
			{
				List<Dec> RESULT = null;
				int dleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Procedimento d = (Procedimento) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Dec>(Arrays.asList(d));
				;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec", 3,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 9: // dec ::= dec_func
			{
				List<Dec> RESULT = null;
				int dleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Funcao d = (Funcao) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Dec>(Arrays.asList(d));
				;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec", 3,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 10: // tipo ::= tipo_base
			{
				Tipo RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int tright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				TipoBase t = (TipoBase) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = t;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("tipo", 10,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 11: // tipo ::= tipo_array
			{
				Tipo RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int tright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				TipoArray t = (TipoArray) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = t;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("tipo", 10,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 12: // tipo_base ::= tbase
			{
				TipoBase RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int tright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				TBase t = (TBase) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new TipoBase(t);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("tipo_base", 11,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 13: // tbase ::= INT
			{
				TBase RESULT = null;

				RESULT = TBase.INT;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("tbase", 13,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 14: // tbase ::= BOOL
			{
				TBase RESULT = null;

				RESULT = TBase.BOOL;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("tbase", 13,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 15: // tbase ::= REAL
			{
				TBase RESULT = null;

				RESULT = TBase.REAL;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("tbase", 13,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 16: // tipo_array ::= tbase indices
			{
				TipoArray RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				TBase t = (TBase) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).value;
				int illeft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int ilright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<Exp> il = (List<Exp>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new TipoArray(t, il);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("tipo_array", 12,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 17: // indices ::= indice
			{
				List<Exp> RESULT = null;
				int ileft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int iright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp i = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Exp>(Arrays.asList(i));

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("indices", 14,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 18: // indices ::= indices indice
			{
				List<Exp> RESULT = null;
				int illeft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int ilright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				List<Exp> il = (List<Exp>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;
				int ileft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int iright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp i = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				il.add(i);
				RESULT = il;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("indices", 14,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 19: // indice ::= LBRACK exp RBRACK
			{
				Exp RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).value;

				RESULT = e;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("indice", 15,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 20: // id_inic_lst ::= id_inic
			{
				List<Object> RESULT = null;
				int iileft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int iiright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Object[] ii = (Object[]) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Object>(Arrays.asList((Object) ii));

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("id_inic_lst", 16,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 21: // id_inic_lst ::= id_inic_lst COMMA id_inic
			{
				List<Object> RESULT = null;
				int iilleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int iilright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				List<Object> iil = (List<Object>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int iileft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int iiright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Object[] ii = (Object[]) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				iil.add(ii);
				RESULT = iil;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("id_inic_lst", 16,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 22: // id_inic ::= ID
			{
				Object[] RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int idright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Object[] { id, null };

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("id_inic", 18,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 23: // id_inic ::= inic
			{
				Object[] RESULT = null;
				int inleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int inright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Object[] in = (Object[]) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = in;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("id_inic", 18,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 24: // inic_lst ::= inic
			{
				List<Object> RESULT = null;
				int inleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int inright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Object[] in = (Object[]) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Object>(Arrays.asList((Object) in));

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("inic_lst", 17,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 25: // inic_lst ::= inic_lst COMMA inic
			{
				List<Object> RESULT = null;
				int inlleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int inlright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				List<Object> inl = (List<Object>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int inleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int inright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Object[] in = (Object[]) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				inl.add(in);
				RESULT = inl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("inic_lst", 17,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 26: // inic ::= ID ASSIGN exp
			{
				Object[] RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Object[] { id, e };

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("inic", 19,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 27: // inic ::= ID ASSIGN array_ext
			{
				Object[] RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<Exp> e = (List<Exp>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Object[] { id, e };

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("inic", 19,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 28: // array_ext ::= LBRACK exp_lst RBRACK
			{
				List<Exp> RESULT = null;
				int elleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int elright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				List<Exp> el = (List<Exp>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;

				RESULT = el;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("array_ext", 20,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 29: // dec_var ::= VAR tipo id_inic_lst SEMICOLON
			{
				List<DecVar> RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int iileft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int iiright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				List<Object> ii = (List<Object>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;

				List<DecVar> dl = new ArrayList<DecVar>();
				for (Object i : ii) {
					Object[] v = (Object[]) i;

					if (v[1] == null) {
						dl.add(new DecVar(new VarNaoInic(t, (String) v[0])));
					} else if (v[1] instanceof Exp) {
						dl.add(new DecVar(new VarInic(t, (String) v[0], (Exp) v[1])));
					} else {
						dl.add(new DecVar(new VarInicExt(t, (String) v[0], (ArrayList<Exp>) v[1])));
					}
					;
				}
				;
				RESULT = dl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_var", 4,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 30: // dec_cons ::= CONS tipo inic_lst SEMICOLON
			{
				List<DecCons> RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int illeft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int ilright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				List<Object> il = (List<Object>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;

				List<DecCons> dl = new ArrayList<DecCons>();
				for (Object i : il) {
					Object[] v = (Object[]) i;

					if (v[1] instanceof Exp) {
						dl.add(new DecCons(new Cons(t, (String) v[0], (Exp) v[1])));
					} else {
						dl.add(new DecCons(new ConsExt(t, (String) v[0], (ArrayList<Exp>) v[1])));
					}
					;
				}
				;
				RESULT = dl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_cons", 5,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 31: // literal ::= INT_LITERAL
			{
				Literal RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int lright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				java.lang.Integer l = (java.lang.Integer) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new LiteralInt(l);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("literal", 21,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 32: // literal ::= REAL_LITERAL
			{
				Literal RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int lright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				java.lang.Double l = (java.lang.Double) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = null;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("literal", 21,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 33: // literal ::= BOOL_LITERAL
			{
				Literal RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int lright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				java.lang.Boolean l = (java.lang.Boolean) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new LiteralBool(l);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("literal", 21,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 34: // exp ::= una_exp
			{
				Exp RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = e;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("exp", 22,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 35: // exp ::= bin_exp
			{
				Exp RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = e;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("exp", 22,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 36: // exp_lst_opt ::=
			{
				List<Exp> RESULT = null;

				RESULT = new ArrayList<Exp>();

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("exp_lst_opt", 26,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 37: // exp_lst_opt ::= exp_lst
			{
				List<Exp> RESULT = null;
				int elleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int elright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<Exp> el = (List<Exp>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = el;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("exp_lst_opt", 26,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 38: // exp_lst ::= exp
			{
				List<Exp> RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Exp>(Arrays.asList(e));

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("exp_lst", 25,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 39: // exp_lst ::= exp_lst COMMA exp
			{
				List<Exp> RESULT = null;
				int elleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int elright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				List<Exp> el = (List<Exp>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				el.add(e);
				RESULT = el;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("exp_lst", 25,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 40: // una_exp ::= literal
			{
				Exp RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int lright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Literal l = (Literal) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = l;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("una_exp", 23,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 41: // una_exp ::= variable
			{
				Exp RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int vright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Var v = (Var) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new VarExp(v);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("una_exp", 23,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 42: // una_exp ::= LPAREN exp RPAREN
			{
				Exp RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).value;

				RESULT = e;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("una_exp", 23,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 43: // una_exp ::= chamada
			{
				Exp RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Object[] c = (Object[]) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ChamadaExp((String) c[0], (List<Exp>) c[1]);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("una_exp", 23,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 44: // una_exp ::= NOT exp
			{
				Exp RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Nao(e);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("una_exp", 23,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 45: // una_exp ::= SUB exp
			{
				Exp RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Menos(e);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("una_exp", 23,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 46: // una_exp ::= bloco_exp
			{
				Exp RESULT = null;
				int beleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int beright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Object[] be = (Object[]) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BlocoExp((List<DCons>) be[0], (Exp) be[1]);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("una_exp", 23,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 47: // variable ::= ID
			{
				Var RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int idright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Simples(id);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("variable", 29,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 48: // variable ::= variable indice
			{
				Var RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Var v = (Var) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).value;
				int ileft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int iright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp i = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Indexada(v, i);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("variable", 29,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 49: // chamada ::= ID LPAREN exp_lst_opt RPAREN
			{
				Object[] RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 3)).value;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				List<Exp> e = (List<Exp>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;

				RESULT = new Object[] { id, e };

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("chamada", 27,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 50: // bin_exp ::= exp SUM exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BinExp(BinOp.SOM, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 51: // bin_exp ::= exp SUB exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BinExp(BinOp.SUB, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 52: // bin_exp ::= exp MUL exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BinExp(BinOp.MUL, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 53: // bin_exp ::= exp DIV exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BinExp(BinOp.DIV, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 54: // bin_exp ::= exp MOD exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BinExp(BinOp.MOD, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 55: // bin_exp ::= exp GT exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				// RESULT = null;
				RESULT = new BinExp(BinOp.SOM, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 56: // bin_exp ::= exp LT exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BinExp(BinOp.MENOR, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 57: // bin_exp ::= exp EQ exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BinExp(BinOp.IGUAL, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 58: // bin_exp ::= exp AND exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BinExp(BinOp.E, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 59: // bin_exp ::= exp OR exp
			{
				Exp RESULT = null;
				int e1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int e1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e1 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int e2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int e2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Exp e2 = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new BinExp(BinOp.OU, e1, e2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bin_exp", 24,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 60: // dec_cons_lst_opt ::=
			{
				List<DCons> RESULT = null;

				RESULT = new ArrayList<DCons>();

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_cons_lst_opt", 7,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 61: // dec_cons_lst_opt ::= dec_cons_lst
			{
				List<DCons> RESULT = null;
				int dclleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dclright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<DCons> dcl = (List<DCons>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = dcl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_cons_lst_opt", 7,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 62: // dec_cons_lst ::= dec_cons
			{
				List<DCons> RESULT = null;
				int dcleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dcright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<DecCons> dc = (List<DecCons>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				ArrayList<DCons> r = new ArrayList<DCons>();
				for (DecCons d : dc)
					r.add(d.dcons);
				RESULT = r;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_cons_lst", 6,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 63: // dec_cons_lst ::= dec_cons dec_cons_lst
			{
				List<DCons> RESULT = null;
				int dcleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int dcright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				List<DecCons> dc = (List<DecCons>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;
				int dclleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dclright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<DCons> dcl = (List<DCons>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				for (DecCons d : dc)
					dcl.add(d.dcons);
				RESULT = dcl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_cons_lst", 6,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 64: // bloco_exp ::= LBRACE dec_cons_lst_opt exp RBRACE
			{
				Object[] RESULT = null;
				int dclleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int dclright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				List<DCons> dcl = (List<DCons>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).value;

				RESULT = new Object[] { dcl, e };

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bloco_exp", 28,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 65: // param_ref_opt ::=
			{
				Boolean RESULT = null;

				RESULT = false;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("param_ref_opt", 34,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 66: // param_ref_opt ::= VAR
			{
				Boolean RESULT = null;

				RESULT = true;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("param_ref_opt", 34,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 67: // tipo_param ::= tbase dimen_lst_opt
			{
				Object[] RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				TBase t = (TBase) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).value;
				int dlsleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dlsright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Integer dls = (Integer) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Object[] { t, dls };

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("tipo_param", 30,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 68: // dimen_lst_opt ::=
			{
				Integer RESULT = null;

				RESULT = 0;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dimen_lst_opt", 31,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 69: // dimen_lst_opt ::= dimen_lst
			{
				Integer RESULT = null;
				int dlsleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dlsright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Integer dls = (Integer) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = dls;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dimen_lst_opt", 31,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 70: // dimen_lst ::= dimen
			{
				Integer RESULT = null;
				int dleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Integer d = (Integer) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = d;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dimen_lst", 32,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 71: // dimen_lst ::= dimen dimen_lst
			{
				Integer RESULT = null;
				int dleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int dright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Integer d = (Integer) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;
				int dlsleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dlsright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Integer dls = (Integer) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = dls + d;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dimen_lst", 32,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 72: // dimen ::= LBRACK RBRACK
			{
				Integer RESULT = null;

				RESULT = 1;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dimen", 33,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 73: // parametro ::= param_ref_opt tipo_param ID
			{
				Parametro RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Boolean p = (Boolean) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int tpleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int tpright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Object[] tp = (Object[]) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;
				int idleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int idright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				if (p)
					if ((Integer) tp[1] > 0)
						RESULT = new ParArrayRef((TBase) tp[0], id, (Integer) tp[1]);
					else
						RESULT = new ParBaseRef((TBase) tp[0], id);
				else 
				if ((Integer) tp[1] > 0)
					RESULT = new ParArrayCopia((TBase) tp[0], id, (Integer) tp[1]);
				else
					RESULT = new ParBaseCopia((TBase) tp[0], id);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("parametro", 35,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 74: // param_lst ::= parametro
			{
				List<Parametro> RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int pright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Parametro p = (Parametro) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<Parametro>(Arrays.asList(p));

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("param_lst", 36,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 75: // param_lst ::= param_lst COMMA parametro
			{
				List<Parametro> RESULT = null;
				int plleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int plright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				List<Parametro> pl = (List<Parametro>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int pleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int pright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Parametro p = (Parametro) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				pl.add(p);
				RESULT = pl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("param_lst", 36,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 76: // parametros_opt ::=
			{
				List<Parametro> RESULT = null;

				RESULT = new ArrayList<Parametro>();

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("parametros_opt", 37,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 77: // parametros_opt ::= param_lst
			{
				List<Parametro> RESULT = null;
				int plleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int plright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<Parametro> pl = (List<Parametro>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = pl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("parametros_opt", 37,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 78: // dec_proc ::= PROCEDURE ID LPAREN parametros_opt RPAREN
						// comando
			{
				Procedimento RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 4)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 4)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 4)).value;
				int plleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int plright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				List<Parametro> pl = (List<Parametro>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Comando c = (Comando) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Procedimento(id, pl, c);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_proc", 9,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 5)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 79: // dec_func ::= FUNCTION tipo ID LPAREN parametros_opt
						// RPAREN exp SEMICOLON
			{
				Funcao RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 6)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 6)).right;
				Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 6)).value;
				int idleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 5)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 5)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 5)).value;
				int plleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).left;
				int plright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).right;
				List<Parametro> pl = (List<Parametro>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 3)).value;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).value;

				RESULT = new Funcao(t, id, pl, e);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_func", 8,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 7)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 80: // comando ::= bloco
			{
				Comando RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				BLOCO c = (BLOCO) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = c;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando", 38,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 81: // comando ::= comando_if
			{
				Comando RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				IF c = (IF) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = c;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando", 38,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 82: // comando ::= comando_while
			{
				Comando RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				WHILE c = (WHILE) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = c;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando", 38,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 83: // comando ::= comando_assign
			{
				Comando RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				ASSIGN c = (ASSIGN) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = c;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando", 38,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 84: // comando ::= comando_chamada
			{
				Comando RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				CHAMADA c = (CHAMADA) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = c;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando", 38,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 85: // comando_if ::= comando_if_then
			{
				IF RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				IF c = (IF) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = c;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando_if", 43,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 86: // comando_if ::= comando_if_then_else
			{
				IF RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				IF c = (IF) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = c;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando_if", 43,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 87: // comando_if_then ::= IF LPAREN exp RPAREN THEN comando
			{
				IF RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).value;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Comando c = (Comando) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new IF(e, c);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando_if_then", 44,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 5)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 88: // comando_if_then_else ::= IF LPAREN exp RPAREN THEN
						// comando ELSE comando
			{
				IF RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 5)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 5)).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 5)).value;
				int c1left = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int c1right = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Comando c1 = (Comando) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 2)).value;
				int c2left = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int c2right = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Comando c2 = (Comando) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new IF(e, c1, c2);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando_if_then_else", 45,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 7)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 89: // comando_while ::= WHILE LPAREN exp RPAREN comando
			{
				WHILE RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)).value;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Comando c = (Comando) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new WHILE(e, c);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando_while", 42,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 90: // comando_assign ::= variable ASSIGN exp SEMICOLON
			{
				ASSIGN RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).right;
				Var v = (Var) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)).value;
				int eleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).value;

				RESULT = new ASSIGN(v, e);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando_assign", 40,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 3)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 91: // comando_chamada ::= chamada SEMICOLON
			{
				CHAMADA RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				Object[] c = (Object[]) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;

				RESULT = new CHAMADA((String) c[0], (List<Exp>) c[1]);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("comando_chamada", 41,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 92: // bloco ::= LBRACE bloco_comandos_opt RBRACE
			{
				BLOCO RESULT = null;
				int bleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int bright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				List<DVarConsCom> b = (List<DVarConsCom>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;

				RESULT = new BLOCO(b);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bloco", 39,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 93: // bloco_comandos_opt ::=
			{
				List<DVarConsCom> RESULT = null;

				RESULT = new ArrayList<DVarConsCom>();

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bloco_comandos_opt", 46,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 94: // bloco_comandos_opt ::= bloco_comandos
			{
				List<DVarConsCom> RESULT = null;
				int bleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int bright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<DVarConsCom> b = (List<DVarConsCom>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = b;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bloco_comandos_opt", 46,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 95: // bloco_comandos ::= dec_comandos
			{
				List<DVarConsCom> RESULT = null;
				int dleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				DVarConsCom d = (DVarConsCom) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new ArrayList<DVarConsCom>(Arrays.asList(d));

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bloco_comandos", 47,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 96: // bloco_comandos ::= bloco_comandos dec_comandos
			{
				List<DVarConsCom> RESULT = null;
				int dvcclleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).left;
				int dvcclright = ((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)).right;
				List<DVarConsCom> dvccl = (List<DVarConsCom>) ((java_cup.runtime.Symbol) CUP$XParser$stack
						.elementAt(CUP$XParser$top - 1)).value;
				int dvccleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dvccright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				DVarConsCom dvcc = (DVarConsCom) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				dvccl.add(dvcc);
				RESULT = dvccl;

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("bloco_comandos", 47,
						((java_cup.runtime.Symbol) CUP$XParser$stack.elementAt(CUP$XParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 97: // dec_comandos ::= comando
			{
				DVarConsCom RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				Comando c = (Comando) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new Com(c);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_comandos", 48,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 98: // dec_comandos ::= dec_var
			{
				DVarConsCom RESULT = null;
				int dvarleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dvarright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<DecVar> dvar = (List<DecVar>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new DV(dvar.get(0).dvar);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_comandos", 48,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 99: // dec_comandos ::= dec_cons
			{
				DVarConsCom RESULT = null;
				int dconsleft = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).left;
				int dconsright = ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).right;
				List<DecCons> dcons = (List<DecCons>) ((java_cup.runtime.Symbol) CUP$XParser$stack.peek()).value;

				RESULT = new DC(dcons.get(0).dcons);

				CUP$XParser$result = parser.getSymbolFactory().newSymbol("dec_comandos", 48,
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$XParser$stack.peek()), RESULT);
			}
				return CUP$XParser$result;

			/* . . . . . . */
			default:
				throw new Exception("Invalid action number " + CUP$XParser$act_num + "found in internal parse table");

			}
		} /* end of method */

		/** Method splitting the generated action code into several parts. */
		public final java_cup.runtime.Symbol CUP$XParser$do_action(int CUP$XParser$act_num,
				java_cup.runtime.lr_parser CUP$XParser$parser, java.util.Stack CUP$XParser$stack, int CUP$XParser$top)
				throws java.lang.Exception {
			return CUP$XParser$do_action_part00000000(CUP$XParser$act_num, CUP$XParser$parser, CUP$XParser$stack,
					CUP$XParser$top);
		}
	}

}
